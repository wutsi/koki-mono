database:
    pool-size: 4

spring:
    datasource:
        driverClassName: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/koki?serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
        username: root
        password:
        hikari:
            connection-timeout: 30000
            connection-test-query: "SELECT 1"
            idle-timeout: 600000             # 10 mins
            initialization-fail-timeout: 60000
            leak-detection-threshold: 0
            max-lifetime: 1800000            # 30 mins
            maximum-pool-size: ${database.pool-size}
            data-source-properties:
                cachePrepStmts: true
                prepStmtCacheSize: 250
                prepStmtCacheSqlLimit: 2048
    flyway:
        clean-disabled: false
        locations: "classpath:db/migration/common,classpath:db/migration/local"
    jpa:
        show-sql: false
        hibernate:
            ddl-auto: none
            naming:
                physical-strategy: com.wutsi.koki.platform.util.CustomPhysicalNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQLDialect

    jackson:
        default-property-inclusion: non_null
        deserialization:
            FAIL_ON_UNKNOWN_PROPERTIES: false
            ACCEPT_EMPTY_STRING_AS_NULL_OBJECT: true
        mapper:
            ACCEPT_CASE_INSENSITIVE_ENUMS: true
            ACCEPT_CASE_INSENSITIVE_PROPERTIES: true
        parser:
            INCLUDE_SOURCE_IN_LOCATION: true

    mvc:
        pathmatch:
            matching-strategy: ANT_PATH_MATCHER
    servlet:
        multipart:
            max-file-size: 10240KB
            max-request-size: 10240KB

server:
    port: 8080
    compression:
        enabled: true
        mime-types: application/json,application/xml,text/html,text/xml,text/plain
        min-response-size: 512

springdoc:
    packages-to-scan: com.wutsi.koki
    show-actuator: true
    swagger-ui:
        path: /api.html
        operations-sorter: alpha
        tags-sorter: alpha
    group-configs:
        -   group: authentication
            display-name: Authentication API
            paths-to-match: /v1/auth, /v1/auth/*

        -   group: accounts
            display-name: Account API
            paths-to-match: /v1/attributes, /v1/attributes/**, /v1/accounts, /v1/accounts/**, /v1/account-users, /v1/account-users/**, /v1/invitations, /v1/invitations/**

        -   group: contacts
            display-name: Contact API
            paths-to-match: /v1/contacts, /v1/contacts/**

        -   group: files
            display-name: File API
            paths-to-match: /v1/files, /v1/files/**

        -   group: invoices
            display-name: Invoice API
            paths-to-match: /v1/invoices, /v1/invoices/**

        -   group: lodging
            display-name: Lodging API
            paths-to-match: /v1/rooms, /v1/rooms/**, /v1/room-units, /v1/room-units/**

        -   group: messages
            display-name: Message API
            paths-to-match: /v1/messages, /v1/messages/**

        -   group: modules
            display-name: Module API
            paths-to-match: /v1/modules, /v1/modules/**, /v1/permissions

        -   group: notes
            display-name: Note API
            paths-to-match: /v1/notes, /v1/notes/*

        -   group: payments
            display-name: Payment API
            paths-to-match: /v1/payments, /v1/payments/**, /v1/refunds, /v1/refunds/**, /v1/transactions, /v1/transactions/**

        -   group: products
            display-name: Product API
            paths-to-match: /v1/prices, /v1/prices/**, /v1/products, /v1/products/**

        -   group: refdata
            display-name: RefData API
            paths-to-match: /v1/amenities, /v1/amenities/**, /v1/categories, /v1/categories/**, /v1/juridictions, /v1/juridictions/**, /v1/locations, /v1/locations/*, /v1/refdata/**, /v1/sales-taxes, /v1/sales-taxes/**, /v1/units

        -   group: rooms
            display-name: Rooms API
            paths-to-match: /v1/rooms, /v1/rooms/**, /v1/room-units, /v1/room-units/**

        -   group: tenant
            display-name: Tenant API
            paths-to-match: /v1/businesses, /v1/tenants, /v1/tenants/**, /v1/types, /v1/types/**, /v1/configurations, /v1/configurations/**

        -   group: user
            display-name: User API
            paths-to-match: /v1/users, /v1/users/**, /v1/roles, /v1/roles/**

management:
    endpoint:
        health:
            show-details: always
        info:
            git:
                mode: full
    endpoints:
        web:
            exposure:
                include: "beans,flyway,health,info,scheduledtasks,mappings"

logging:
    level:
        root: INFO
        com.amazonaws: ERROR
        com.icegreen.greenmail.smtp.SmtpManager: ERROR
        org.springframework: INFO
        org.hibernate: ERROR
        org.apache.poi: ERROR
        org.hibernate.engine.jdbc.spi.SqlExceptionHelper: OFF
        com.wutsi: DEBUG
        springfox: ERROR

    pattern:
        console: "%d Type=%level Logger=%c Thread=%thread %m%n"
        file: "%d Type=%level Logger=%c Thread=%thread %m%n"

koki:
    webapp:
        client-id: koki-server
        server-url: http://localhost:${server.port}

    kpi:
        daily-cron: "0 */15 * * * *"  # Flush every 15 mins
        monthly-cron: "0 0 7 2 * *"   # Every 2nd of each month at 7:00AM

    translation:
        type: ai  # AI | AWS
        aws:
            region: us-east-1
            access-key: ""
            secret-key: ""

    smtp:
        host: localhost
        port: 3025
        username: wutsi
        password: secret
        from: no-reply@wutsi.com

    payment-gateway:
        stripe:
            session:
                timeout-minutes: 30

    module:
        consumer-delay-seconds: 1

        ref-data:
            geonames:
                connect-timeout: 30000
                read-timeout: 60000
        email:
            mq:
                consumer-delay-seconds: ${koki.module.consumer-delay-seconds}
                queue: koki-email-queue
                dlq: koki-email-dlq
                dlq-cron: "0 */5 * * * *"  # Process DLQ Every 5 mins

        file:
            mq:
                consumer-delay-seconds: ${koki.module.consumer-delay-seconds}
                queue: koki-file-queue
                dlq: koki-file-dlq
                dlq-cron: "0 */5 * * * *"  # Process DLQ Every 5 mins

        invoice:
            mq:
                consumer-delay-seconds: ${koki.module.consumer-delay-seconds}
                queue: koki-invoice-queue
                dlq: koki-invoice-dlq
                dlq-cron: "0 */5 * * * *"  # Process DLQ Every 5 mins

        notification:
            mq:
                consumer-delay-seconds: ${koki.module.consumer-delay-seconds}
                queue: koki-notification-queue
                dlq: koki-notification-dlq
                dlq-cron: "0 */5 * * * *"  # Process DLQ Every 5 mins

        room:
            mq:
                consumer-delay-seconds: ${koki.module.consumer-delay-seconds}
                queue: koki-room-queue
                dlq: koki-room-dlq
                dlq-cron: "0 */5 * * * *"  # Process DLQ Every 5 mins
            metric:
                location:
                    cron: "0 0 0 * * *"  # Daily at midnight
            validation:
                publisher:
                    min-images: 5

        security:
            access-token:
                ttl: 3600 # 1 hour

        transaction:
            pending:
                cron: "0 */30 * * * *"     # Update PENDING transactions every 30 mins
wutsi:
    platform:
        ai:
            enabled: true
            rest:
                read-timeout: 60000 # 1 minute
                connect-timeout: 60000 # 1 miniute
            model:
                type: gemini
                deepseek:
                    api-key: ${DEEPSEEK_API_KEY}
                    model: deepseek-chat
                gemini:
                    api-key: ${GEMINI_API_KEY}
                    model: gemini-2.0-flash
        cache:
            name: koki
            type: redis
            ttl: 86400
            redis:
                url: redis://:test@localhost:6379
        executor:
            thread-pool:
                name: ${koki.webapp.client-id}
                size: 16
        mq:
            type: rabbitmq
            rabbitmq:
                url: amqp://localhost
                exchange-name: koki
                max-retries: 24
                ttl-seconds: 84600
        storage:
            enabled: true
            type: local # local | s3
            local:
                directory: ${user.home}/__wutsi
                base-url: http://localhost:${server.port}
                servlet-path: /local-storage
            s3:
                bucket: koki-test
                region: us-east-1
                access-key: ""
                secret-key: ""
